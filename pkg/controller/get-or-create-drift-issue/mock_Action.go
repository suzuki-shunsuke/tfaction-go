// Code generated by mockery v2.26.1. DO NOT EDIT.

package issue

import mock "github.com/stretchr/testify/mock"

// MockAction is an autogenerated mock type for the Action type
type MockAction struct {
	mock.Mock
}

type MockAction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAction) EXPECT() *MockAction_Expecter {
	return &MockAction_Expecter{mock: &_m.Mock}
}

// AddStepSummary provides a mock function with given fields: markdown
func (_m *MockAction) AddStepSummary(markdown string) {
	_m.Called(markdown)
}

// MockAction_AddStepSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStepSummary'
type MockAction_AddStepSummary_Call struct {
	*mock.Call
}

// AddStepSummary is a helper method to define mock.On call
//   - markdown string
func (_e *MockAction_Expecter) AddStepSummary(markdown interface{}) *MockAction_AddStepSummary_Call {
	return &MockAction_AddStepSummary_Call{Call: _e.mock.On("AddStepSummary", markdown)}
}

func (_c *MockAction_AddStepSummary_Call) Run(run func(markdown string)) *MockAction_AddStepSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAction_AddStepSummary_Call) Return() *MockAction_AddStepSummary_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAction_AddStepSummary_Call) RunAndReturn(run func(string)) *MockAction_AddStepSummary_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: msg, args
func (_m *MockAction) Infof(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockAction_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockAction_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *MockAction_Expecter) Infof(msg interface{}, args ...interface{}) *MockAction_Infof_Call {
	return &MockAction_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockAction_Infof_Call) Run(run func(msg string, args ...interface{})) *MockAction_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockAction_Infof_Call) Return() *MockAction_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAction_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockAction_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnv provides a mock function with given fields: k, v
func (_m *MockAction) SetEnv(k string, v string) {
	_m.Called(k, v)
}

// MockAction_SetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnv'
type MockAction_SetEnv_Call struct {
	*mock.Call
}

// SetEnv is a helper method to define mock.On call
//   - k string
//   - v string
func (_e *MockAction_Expecter) SetEnv(k interface{}, v interface{}) *MockAction_SetEnv_Call {
	return &MockAction_SetEnv_Call{Call: _e.mock.On("SetEnv", k, v)}
}

func (_c *MockAction_SetEnv_Call) Run(run func(k string, v string)) *MockAction_SetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAction_SetEnv_Call) Return() *MockAction_SetEnv_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAction_SetEnv_Call) RunAndReturn(run func(string, string)) *MockAction_SetEnv_Call {
	_c.Call.Return(run)
	return _c
}

// SetOutput provides a mock function with given fields: k, v
func (_m *MockAction) SetOutput(k string, v string) {
	_m.Called(k, v)
}

// MockAction_SetOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOutput'
type MockAction_SetOutput_Call struct {
	*mock.Call
}

// SetOutput is a helper method to define mock.On call
//   - k string
//   - v string
func (_e *MockAction_Expecter) SetOutput(k interface{}, v interface{}) *MockAction_SetOutput_Call {
	return &MockAction_SetOutput_Call{Call: _e.mock.On("SetOutput", k, v)}
}

func (_c *MockAction_SetOutput_Call) Run(run func(k string, v string)) *MockAction_SetOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAction_SetOutput_Call) Return() *MockAction_SetOutput_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAction_SetOutput_Call) RunAndReturn(run func(string, string)) *MockAction_SetOutput_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAction interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAction creates a new instance of MockAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAction(t mockConstructorTestingTNewMockAction) *MockAction {
	mock := &MockAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
